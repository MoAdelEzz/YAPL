%{ 
    #include <iostream>
    #include <string>

    #include "branching.hpp"
    #include "common.hpp"
    #include "expression.hpp"
    #include "loop.hpp"
    #include "program.hpp"
    #include "scoping.hpp"
    #include "var-op.hpp"
    #include "functions.hpp"
    #include "controllers.hpp"
    #include "returnNode.hpp"
    #include "organizer.hpp"

    #include "parser.tab.hpp"
    extern int yylex();
    extern FILE *yyin;   

    int lineNumber = 1;
    int scopeDepth = 0;
    int quadruplesLabel = 0;
    std::vector<int> breakJumpTo;
    std::vector<int> continueJumpTo;
    std::vector<int> returnJumpTo;

    void yyerror(const char* s) {
        ErrorDetail error(Severity::ERROR, "Syntax Error", "", lineNumber);
        CompilerOrganizer::addError(error);
        std::cerr << "Error: " << s << std::endl;
        std::cerr << "Line: " << lineNumber << std::endl;
    }
    CompilerState CompilerOrganizer::state = VALIDATING;
    std::vector<ErrorDetail> CompilerOrganizer::errors;
    std::vector<SymbolTableEntry> CompilerOrganizer::symbolTable;
    std::vector<QuadrupleEntry> CompilerOrganizer::quadruples;

    int QuadrupleEntry::index = 1;
%}

%union  {
    ProgramNode*    Node;
    Expression*     Exp;
    FunctionParametersNode* FP;
    FunctionCallParametersNode* FCP;
    SwitchBody* SB;
    DataType* DT;

    struct {
        int line;
        char* str;
    } data;
}

%token <data> IF ELSE FOR WHILE DO SWITCH CASE DEFAULT CONTINUE BREAK RETURN PRINT DATA_TYPE
%token <data> IDENTIFIER INTEGER BOOLEAN FLOAT CONST 
%token <data> STRING POW SQRT SHL SHR AND OR GTE LTE LT GT ISEQUAL NOTEQUAL 
%token <data> CHARACTER INCREMENT DECREMENT PLUS_EQUAL MINUS_EQUAL DIV_EQUAL MOD_EQUAL AND_EQUAL OR_EQUAL 
%token <data> XOR_EQUAL MUL_EQUAL SCOPE_BEGIN SCOPE_END

%type <Node>   ForSentence WhileSentence DoWhileSentence FunctionDefinition Case
%type <Node>   IFSentence VariableAssignment VariableDeclaration SwitchSentence
%type <Node>   PrintSentence Scope Sentence Sentences ReturnSentence ForPostSentence LoopScope IfExtension

%type <Exp>  MathOperand Operation FunctionParamOperand ForCondition
%type <Exp>  MathOperation L0MathOperations L1MathOperations L2MathOperations L3MathOperations L4MathOperations L5MathOperations
%type <Exp>  StringOperation L0StringOperation L1StringOperation StringOperand FunctionCall

%type <FP>  FunctionParams FunctionDefaulValueParams
%type <FCP> FunctionCallParams
%type <SB>  SwitchBody
%type <DT>  Type

%left ','
%right '='
%left '|'           
%left '^'           
%left '&'          
%left ISEQUAL NOTEQUAL
%left LT GT LTE GTE
%left SHL SHR
%left '*' '/' '%'
%left '+' '-'
%left '(' ')'
%left '[' ']'
%right '!' OR AND
%right '~'
%right IF
%left ELSE
%left ';'
%left PRINT
%right SCOPE_BEGIN
%left SCOPE_END

%%

Program: Sentences  {
    ScopeNode* scopeNode = new ScopeNode(-1, $1);

    scopeNode->runSemanticChecker();
    CompilerOrganizer::dumpErrors();

    if (CompilerOrganizer::getErrorCount() == 0) {
        scopeNode->generateQuadruples();

        CompilerOrganizer::startRunning();
        scopeNode->run();
        CompilerOrganizer::exitWithSuccess();
        
        CompilerOrganizer::dumpSymbolTable();
        CompilerOrganizer::dumpQuadruples();
        CompilerOrganizer::optimizeQuadruples();
        CompilerOrganizer::dumpQuadruples(true);
    } else {
        std::cout << "There Are " << CompilerOrganizer::getErrorCount()  << " Errors Found" << std::endl;
        CompilerOrganizer::exitWithFailure();
    }

    delete scopeNode;
}

Sentences: 
      Sentence Sentences        { $$ = $1->setNext($2); }
   
    | Scope Sentences           { $$ = $1->setNext($2); } 

    |                           { $$ = nullptr; }

Scope:  
    SCOPE_BEGIN Sentences SCOPE_END       { $$ = new ScopeNode($1.line, $2); }    
    | error SCOPE_END                     { yyerrok; }

Sentence: 
      VariableAssignment ';'    { $$ = $1; }
    | VariableDeclaration ';'   { $$ = $1; }   
    | FunctionDefinition        { $$ = $1; }
    | IFSentence                { $$ = $1; }   
    | ForSentence               { $$ = $1; }
    | WhileSentence             { $$ = $1; }
    | DoWhileSentence           { $$ = $1; }
    | PrintSentence             { $$ = $1; }
    | ReturnSentence            { $$ = $1; }
    | SwitchSentence            { $$ = $1; }
    | CONTINUE ';'              { $$ = new ContinueNode($1.line);}       
    | BREAK ';'                 { $$ = new BreakNode($1.line);}
    | error ';'                 { yyerrok; $$ = new ProgramNode(lineNumber); }


VariableAssignment: 
      IDENTIFIER '=' Operation    { $$ = new AssignNode($1.line, $1.str, $3); }        

    | Operation {
        $$ = new AssignNode(lineNumber, "", $1);
    } 
    
    | IDENTIFIER PLUS_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_ADD);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER MINUS_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_SUB);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER MUL_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_MUL);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER DIV_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_DIV);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER MOD_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_MOD);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER AND_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_AND);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER OR_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_OR);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }

    | IDENTIFIER XOR_EQUAL Operation    { 
        Expression* id = new IdentifierContainer($1.str);
        Expression* exp = new Expression(id, $3, OP_XOR);
        $$ = new AssignNode($1.line, $1.str, exp); 
    }


SwitchSentence:  
      SWITCH '(' Operation ')' SCOPE_BEGIN SwitchBody SCOPE_END { $$ = new SwitchNode($1.line, $3, $6); }
    | SWITCH '(' Operation ')' SCOPE_BEGIN SCOPE_END            { $$ = new SwitchNode($1.line, $3, nullptr); }

SwitchBody:
      Case Sentences                { 
        $$ = new SwitchBody(dynamic_cast<CaseNode*>($1)->assignBody($2)); 
    }
    | SwitchBody Case Sentences     { 
        $$ = dynamic_cast<SwitchBody*>($1)->addCase(dynamic_cast<CaseNode*>($2)->assignBody($3)); 
    }

Case: 
      CASE Operation ':'            { $$ = new CaseNode($1.line, $2); }
    | DEFAULT ':'                   { $$ = new CaseNode($1.line);};

ReturnSentence:
      RETURN Operation ';'            { $$ = new ReturnNode($1.line, $2);};
    | RETURN ';'                      { $$ = new ReturnNode($1.line); }

PrintSentence:  
    PRINT '(' Operation ')' ';'     { $$ = new PrintNode($1.line, $3);  }

IFSentence:
       IF '(' VariableAssignment ')' IfExtension                    { $$ = new IfNode($1.line, dynamic_cast<AssignNode*>($3), $5);   }

    |  IF '(' VariableAssignment ')' IfExtension ELSE IfExtension   { $$ = new IfNode($1.line, dynamic_cast<AssignNode*>($3), $5); dynamic_cast<IfNode*>($$)->setElse($7);   }


IfExtension:
      Sentence                                                    {  $$ = new ScopeNode(lineNumber, $1); }
    | Scope

ForSentence: FOR '(' VariableDeclaration ';' ForCondition ';' ForPostSentence ')' LoopScope {
    $$ = new ForNode($1.line, $3, $5, dynamic_cast<AssignNode*>($7), dynamic_cast<ScopeNode*>($9));
} 
| FOR '(' VariableAssignment ';' ForCondition ';' ForPostSentence ')' LoopScope {
    $$ = new ForNode($1.line, $3, $5, dynamic_cast<AssignNode*>($7), dynamic_cast<ScopeNode*>($9));
} 

ForCondition: Operation |  {$$ = nullptr;};

ForPostSentence:
      VariableAssignment                         { $$ = $1;  }
    | ForPostSentence ',' VariableAssignment     { $$ = dynamic_cast<AssignNode*>($1)->setNextAssignment($3); };
    | {$$ = nullptr;};

WhileSentence: WHILE '(' VariableAssignment ')' LoopScope {
    $$ = new WhileNode($1.line, dynamic_cast<AssignNode*>($3), dynamic_cast<ScopeNode*>($5));
}           

DoWhileSentence: DO LoopScope WHILE '(' VariableAssignment ')' ';' {
    $$ = new DoWhileNode($1.line, dynamic_cast<AssignNode*>($5), dynamic_cast<ScopeNode*>($2));
} 

LoopScope:
    Scope | Sentence { $$ = new ScopeNode(lineNumber, $1); }

FunctionDefinition: 
      Type IDENTIFIER '(' FunctionParams ')' Scope { 
        $$ = new FunctionDefintionNode($2.line, $1, $2.str, $4, dynamic_cast<ScopeNode*>($6)); 
    }

FunctionParams: 
      Type IDENTIFIER ',' FunctionParams                                      { $$ = $4->addParameter(nullptr, $1, $2.str);}
    | FunctionDefaulValueParams                                               { $$ = $1;}
    | Type IDENTIFIER                                                         { $$ = new FunctionParametersNode(nullptr, $1, $2.str);}
    |                                                                         { $$ = nullptr; }

FunctionDefaulValueParams:
      Type IDENTIFIER '=' FunctionParamOperand ',' FunctionDefaulValueParams  { $$ = $6->addParameter($4, $1, $2.str);}
    | Type IDENTIFIER '=' StringOperand ',' FunctionDefaulValueParams         { $$ = $6->addParameter($4, $1, $2.str);}
    | Type IDENTIFIER '=' FunctionParamOperand                                { $$ = new FunctionParametersNode($4, $1, $2.str);}
    | Type IDENTIFIER '=' StringOperand                                       { $$ = new FunctionParametersNode($4, $1, $2.str);}

VariableDeclaration: 
      Type IDENTIFIER                                   { $$ = new DefineNode($2.line, $1, $2.str, nullptr); }
    | Type IDENTIFIER '=' Operation                     { $$ = new DefineNode($2.line, $1, $2.str, $4); }
    | VariableDeclaration ',' IDENTIFIER                { $$ = dynamic_cast<DefineNode*>($1)->setNextDefine( new DefineNode($3.line, $3.str, nullptr) ); }
    | VariableDeclaration ',' IDENTIFIER '=' Operation  { $$ = dynamic_cast<DefineNode*>($1)->setNextDefine( new DefineNode($3.line, $3.str, $5) ); }
    | {$$ = nullptr;};

Operation: 
      MathOperation             
    | StringOperation                              
    
FunctionCall:
        IDENTIFIER '(' FunctionCallParams ')'       { $$ = new FunctionCallNode( $1.line, $1.str, $3 ); }
    |   IDENTIFIER '(' ')'                          { $$ = new FunctionCallNode( $1.line, $1.str, nullptr ); }

FunctionCallParams:
        FunctionCallParams ',' Operation            { $$ = $1->addParameter($3); }
    |   Operation                                   { $$ = new FunctionCallParametersNode($1); }

MathOperation:
        L0MathOperations
    |   MathOperation AND L0MathOperations       { $$ = new Expression($1, $3, OP_AND); }  
    |   MathOperation OR  L0MathOperations       { $$ = new Expression($1, $3, OP_OR);  }   

L0MathOperations:
        L1MathOperations
    |   L1MathOperations GTE      L0MathOperations        { $$ = new Expression($1, $3, OP_GE);  } 
    |   '-' L1MathOperations                              { $$ = new Expression($2, $2, OP_UMINUS);  } 
    |   L1MathOperations GT       L0MathOperations        { $$ = new Expression($1, $3, OP_GT);  } 
    |   L1MathOperations LTE      L0MathOperations        { $$ = new Expression($1, $3, OP_LE);  } 
    |   L1MathOperations LT       L0MathOperations        { $$ = new Expression($1, $3, OP_LT);  } 
    |   L1MathOperations ISEQUAL  L0MathOperations        { $$ = new Expression($1, $3, OP_EQ);  } 
    |   L1MathOperations NOTEQUAL L0MathOperations        { $$ = new Expression($1, $3, OP_NEQ); }  
    |   '!' L1MathOperations                        { $$ = new Expression($2, $2, OP_NOT); }

L1MathOperations:
        L2MathOperations '+' L1MathOperations             { $$ = new Expression($1, $3, OP_ADD); }
    |   L2MathOperations '-' L1MathOperations             { $$ = new Expression($1, $3, OP_SUB); }  
    |   L2MathOperations '|' L1MathOperations             { $$ = new Expression($1, $3, OP_BW_OR);}
    |   L2MathOperations '&' L1MathOperations             { $$ = new Expression($1, $3, OP_BW_AND);}
    |   L2MathOperations

L2MathOperations:
        L3MathOperations '*' L2MathOperations             { $$ = new Expression($1, $3, OP_MUL); } 
    |   L3MathOperations '/' L2MathOperations             { $$ = new Expression($1, $3, OP_DIV); }    
    |   L3MathOperations '%' L2MathOperations             { $$ = new Expression($1, $3, OP_MOD); }   
    |   L3MathOperations '^' L2MathOperations             { $$ = new Expression($1, $3, OP_XOR); }
    |   L3MathOperations

L3MathOperations:
        '(' L0MathOperations ')'                          { $$ = $2; }
    |   POW '(' L0MathOperations ',' L0MathOperations ')' { $$ = new Expression($3, $5, OP_POW); }
    |   SQRT '(' L0MathOperations ')'                     { $$ = new Expression($3, $3, OP_SQRT);}
    |   L4MathOperations

L4MathOperations:
        L5MathOperations SHL L4MathOperations             { $$ = new Expression($1, $3, OP_SHL); } 
    |   L5MathOperations SHR L4MathOperations             { $$ = new Expression($1, $3, OP_SHR); } 
    |   L5MathOperations

L5MathOperations:
        '~' MathOperand                             { $$ = new Expression($2, $2, OP_BW_NOT); }
    |   IDENTIFIER INCREMENT                        { $$ = new IdentifierContainer($1.str, OP_POST_ADD); }
    |   INCREMENT IDENTIFIER                        { $$ = new IdentifierContainer($2.str, OP_PRE_ADD); }
    |   DECREMENT IDENTIFIER                        { $$ = new IdentifierContainer($2.str, OP_PRE_SUB); }
    |   IDENTIFIER DECREMENT                        { $$ = new IdentifierContainer($1.str, OP_POST_SUB); }    
    |   MathOperand                    
    |   FunctionCall    
            
StringOperation:
        L0StringOperation GTE      StringOperation    { $$ = new StringContainer($1, $3, OP_GE);   }
    |   L0StringOperation GT       StringOperation    { $$ = new StringContainer($1, $3, OP_GT);   }
    |   L0StringOperation LTE      StringOperation    { $$ = new StringContainer($1, $3, OP_LE);   }
    |   L0StringOperation LT       StringOperation    { $$ = new StringContainer($1, $3, OP_LT);   }
    |   L0StringOperation ISEQUAL  StringOperation    { $$ = new StringContainer($1, $3, OP_EQ);   }
    |   L0StringOperation NOTEQUAL StringOperation    { $$ = new StringContainer($1, $3, OP_NEQ);  }
    |   L0StringOperation   

L0StringOperation:
        L0StringOperation '+' L1StringOperation     { $$ =  new StringContainer($1, $3, OP_ADD); } 
    |   L1StringOperation '-' L0StringOperation     { $$ =  new StringContainer($1, $3, OP_SUB); }    
    |   L0StringOperation '+' L2MathOperations      { $$ =  new StringContainer($1, $3, OP_ADD); }    
    |   L2MathOperations  '+' L0StringOperation     { $$ =  new StringContainer($1, $3, OP_ADD); }    
    |   L1StringOperation SHL L0StringOperation     { $$ =  new StringContainer($1, $3, OP_SHL); } 
    |   L1StringOperation SHR L0StringOperation     { $$ =  new StringContainer($1, $3, OP_SHR); } 
    |   L1StringOperation

L1StringOperation:
        '(' StringOperation ')'                     { $$ =  $2; } 
    |   StringOperand  

FunctionParamOperand:
          INTEGER       { $$ = new Expression($1.str, DataType::Int());}

        | FLOAT         { $$ = new Expression($1.str, DataType::Float());}

        | CHARACTER     { $$ = new Expression($1.str, DataType::Char());}

        | BOOLEAN       { $$ = new Expression($1.str, DataType::Bool());}

MathOperand:
          FunctionParamOperand

        | IDENTIFIER    { $$ = new IdentifierContainer($1.str); }
    
StringOperand: STRING   { $$ = new StringContainer($1.str); }

Type:
      CONST DATA_TYPE   { $$ = new DataType($2.str, true);}
    | DATA_TYPE         { $$ = new DataType($1.str, false);}

%%


int main(int argc, char* argv[]) {
    /* yyin = fopen("test.yapl", "r"); */
    yyin = fopen(argv[1], "r");
    yyparse();
    return 0;
}